// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/product/find_product_data_output_port.go

// Package mocks_product is a generated GoMock package.
package mocks_product

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/ramonmpacheco/poc-hexagonal-go-v2/src/domain/product"
)

// MockFindProductDataOutputPort is a mock of FindProductDataOutputPort interface.
type MockFindProductDataOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockFindProductDataOutputPortMockRecorder
}

// MockFindProductDataOutputPortMockRecorder is the mock recorder for MockFindProductDataOutputPort.
type MockFindProductDataOutputPortMockRecorder struct {
	mock *MockFindProductDataOutputPort
}

// NewMockFindProductDataOutputPort creates a new mock instance.
func NewMockFindProductDataOutputPort(ctrl *gomock.Controller) *MockFindProductDataOutputPort {
	mock := &MockFindProductDataOutputPort{ctrl: ctrl}
	mock.recorder = &MockFindProductDataOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindProductDataOutputPort) EXPECT() *MockFindProductDataOutputPortMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockFindProductDataOutputPort) ById(product *product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ById indicates an expected call of ById.
func (mr *MockFindProductDataOutputPortMockRecorder) ById(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockFindProductDataOutputPort)(nil).ById), product)
}
