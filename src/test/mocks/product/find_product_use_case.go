// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/port/input/product/find_product_use_case.go

// Package mocks_product is a generated GoMock package.
package mocks_product

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productdomain "github.com/ramonmpacheco/poc-hexagonal-go-v2/src/domain/product"
)

// MockFindProductUseCase is a mock of FindProductUseCase interface.
type MockFindProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFindProductUseCaseMockRecorder
}

// MockFindProductUseCaseMockRecorder is the mock recorder for MockFindProductUseCase.
type MockFindProductUseCaseMockRecorder struct {
	mock *MockFindProductUseCase
}

// NewMockFindProductUseCase creates a new mock instance.
func NewMockFindProductUseCase(ctrl *gomock.Controller) *MockFindProductUseCase {
	mock := &MockFindProductUseCase{ctrl: ctrl}
	mock.recorder = &MockFindProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindProductUseCase) EXPECT() *MockFindProductUseCaseMockRecorder {
	return m.recorder
}

// ById mocks base method.
func (m *MockFindProductUseCase) ById(id string) (*productdomain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", id)
	ret0, _ := ret[0].(*productdomain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockFindProductUseCaseMockRecorder) ById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockFindProductUseCase)(nil).ById), id)
}
